/*
	Amidon - a Mastodon client for AmigaOS
    Copyright (C) 2023 Dimitris Panokostas

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/*
** Amidon UI related functions
*/

Function p_ShowWelcomeDialog()
    While Not Eof(welcome_dialog_file) Do welcome_dialog = welcome_dialog .. ReadLine(welcome_dialog_file)
    moai.CreateDialog(welcome_dialog)
    Local result = moai.DoMethod("dlg_welcome", "ShowModal")
    If result = 0 Then End
EndFunction

Function p_OpenLoginDialog()
    While Not Eof(login_dialog_file) Do login_dialog = login_dialog .. ReadLine(login_dialog_file)
    moai.CreateDialog(login_dialog)
    moai.Set("lnk_login", "URL", p_GetAuthorizeUserUrl())
    moai.DoMethod("dlg_login", "ShowModal")
EndFunction

Function p_OpenSettingsDialog()
    While Not Eof(settings_dialog_file) Do settings_dialog = settings_dialog .. ReadLine(settings_dialog_file)
    moai.CreateDialog(settings_dialog)
    moai.Set("txt_server", "Text", settings.server)
    Local result = moai.DoMethod("dlg_settings", "ShowModal")
    If result = 1 Then p_SaveSettings()
EndFunction

Function p_OpenGenericDialog(message_line1, message_line2)
    While Not Eof(generic_dialog_file) Do generic_dialog = generic_dialog .. ReadLine(generic_dialog_file)
    moai.CreateDialog(generic_dialog)
    moai.Set("lbl_message1", "Text", message_line1)
    moai.Set("lbl_message2", "Text", message_line2)
    moai.DoMethod("dlg_generic", "ShowModal")
EndFunction

Function p_OpenHtmlView(content_html)
    While Not Eof(htmlview_dialog_file) Do htmlview_dialog = htmlview_dialog .. ReadLine(htmlview_dialog_file)
    moai.CreateDialog(htmlview_dialog)

    If #DEBUG Then DebugPrint("Opening HTMLview window with content: " .. content_html)
    moai.Set("htmlview_content", "Contents", content_html)
    p_UpdateActionButton2State()
    moai.DoMethod("dlg_htmlview", "ShowModal")
EndFunction

Function p_ClearListView(type)
    Local listview = "lv_" .. type
    moai.DoMethod(listview, "Clear")
EndFunction

Function p_OpenVisibilityDialog(index)
    While Not Eof(visibility_dialog_file) Do visilibity_dialog = visilibity_dialog .. ReadLine(visibility_dialog_file)
    moai.CreateDialog(visilibity_dialog)
    p_UpdateVisibility(index)
    moai.DoMethod("dlg_visibility", "ShowModal")
EndFunction

Function p_SetCWStatus()
    If sensitive = True
        moai.Set("txt_cw", "Hide", False)
    Else
        moai.Set("txt_cw", "Text", Nil)
        moai.Set("txt_cw", "Hide", True)
        spoiler_text = Nil
    EndIf
EndFunction

Function p_RemovePollChoice()
    If poll_options_num = 4
        moai.Set("txt_poll_choice4", "Text", Nil)
        moai.Set("grp_poll_choice4", "Hide", True)
    Else 
        moai.Set("txt_poll_choice3", "Text", Nil)
        moai.Set("grp_poll_choice3", "Hide", True)
    EndIf

    poll_options_num = poll_options_num - 1
    moai.Set("btn_add_poll_choice", "Disabled", False)
EndFunction

Function p_AddPollChoice()
    If poll_options_num = 2
        moai.Set("grp_poll_choice3", "Hide", False)
    Else 
        moai.Set("grp_poll_choice4", "Hide", False)
        moai.Set("btn_add_poll_choice", "Disabled", True)
    EndIf

    poll_options_num = poll_options_num + 1
EndFunction

Function p_SetPollStatus()
    If poll = True
        ;show relevant area
        moai.Set("txt_poll_choice1", "Hide", False)
        moai.Set("txt_poll_choice2", "Hide", False)
        moai.Set("grp_poll_options", "Hide", False)
        moai.Set("cmb_poll_duration", "Value", "1 day")

        poll_options_num = 2

        ;when a poll is active, media cannot be used
        moai.Set("btn_addmedia", "Hide", True)
    Else
        ;hide relevant area
        moai.Set("txt_poll_choice1", "Hide", True)
        moai.Set("txt_poll_choice2", "Hide", True)
        moai.Set("grp_poll_options", "Hide", True)

        poll_options = Nil
        poll_options_num = 0
        poll_expires = 0
        poll_multi = False

        ;re-enable the media button
        moai.Set("btn_addmedia", "Hide", False)
    EndIf
EndFunction

Function p_GetPollOptions()
    poll_options = {}
    For Local i = 0 To poll_options_num - 1
        Local id = "txt_poll_choice" .. i + 1
        poll_options[i] = moai.Get(id, "Text")
        If #DEBUG Then DebugPrint("DEBUG: poll option added: " .. poll_options[i])
    Next

    Local duration_value = moai.Get("cmb_poll_duration", "Value")
    Switch duration_value
    Case "5 minutes":
        poll_expires = 5 * 60
    Case "30 minutes":
        poll_expires = 30 * 60
    Case "1 hour":
        poll_expires = 60 * 60
    Case "6 hours":
        poll_expires = 60 * 60 * 6
    Case "12 hours":
        poll_expires = 60 * 60 * 12
    Case "1 day":
        poll_expires = 60 * 60 * 24
    Case "3 days":
        poll_expires = 60 * 60 * 24 * 3
    Case "7 days":
        poll_expires = 60 * 60 * 24 * 7
    EndSwitch
EndFunction

/*
** Write item to the ListView
*/
Function p_WriteListView(index, item, type)
    Switch type
    Case "notifications":
        ; If the new content is different than the last one we got, insert it at the top
        If last_notification_id <> item["id"]
            last_notification_id = item["id"]

            Local content = item["account"]["display_name"]

            Switch item["type"]
            Case "mention":
                content = content .. " mentioned you" .. ": " .. item["status"]["content"]
                moai.DoMethod("lv_notifications", "Insert", "Top", base:StripHTML(content), item["status"]["reblogged"], item["status"]["favourited"], item["status"]["bookmarked"], item["status"]["id"], "status")
            Case "status":
                content = content .. " posted a new status" .. ": " .. item["status"]["content"]
                moai.DoMethod("lv_notifications", "Insert", "Top", base:StripHTML(content), item["status"]["reblogged"], item["status"]["favourited"], item["status"]["bookmarked"], item["status"]["id"], "status")
            Case "reblog":
                content = content .. " boosted your post" .. ": " .. item["status"]["content"]
                moai.DoMethod("lv_notifications", "Insert", "Top", base:StripHTML(content), item["status"]["reblogged"], item["status"]["favourited"], item["status"]["bookmarked"], item["status"]["id"], "status")
            Case "follow":
                content = content .. " followed you" .. ": " ..  item["account"]["acct"]
                moai.DoMethod("lv_notifications", "Insert", "Top", base:StripHTML(content), Nil, Nil, Nil, item["id"], item["type"])
            Case "follow_request":
                content = content .. " requested to follow you" .. ": "
                moai.DoMethod("lv_notifications", "Insert", "Top", base:StripHTML(content), Nil, Nil, Nil, item["id"], item["type"])
            Case "favourite":
                content = content .. " favourited your post" .. ": " .. item["status"]["content"]
                moai.DoMethod("lv_notifications", "Insert", "Top", base:StripHTML(content), item["status"]["reblogged"], item["status"]["favourited"], item["status"]["bookmarked"], item["status"]["id"], "status")
            Case "poll":
                content = content .. " your poll has ended" .. ": " .. item["status"]["content"]
                moai.DoMethod("lv_notifications", "Insert", "Top", base:StripHTML(content), Nil, Nil, Nil, item["status"]["id"], item["type"])
            Case "update":
                content = content .. " your post has been edited" .. ": " .. item["status"]["content"]
                moai.DoMethod("lv_notifications", "Insert", "Top", base:StripHTML(content), Nil, Nil, Nil, item["status"]["id"], item["type"])
            EndSwitch
        EndIf

    Case "mentions":
        ; If the new content is different than the last one we got, insert it at the top
        If last_mention_id <> item["id"]
            last_mention_id = item["id"]

            Local content = item["account"]["display_name"] .. ": " .. item["status"]["content"]
            moai.DoMethod("lv_mentions", "Insert", "Top", base:StripHTML(content), item["status"]["reblogged"], item["status"]["favourited"], item["status"]["bookmarked"], item["status"]["id"], "status")
        EndIf

    Case "posts":
        Local content = item["account"]["display_name"] .. ": " .. item["content"]
        moai.DoMethod("lv_posts", "Insert", "Top", base:StripHTML(content), item["reblogged"], item["favourited"], item["bookmarked"], item["id"], "status")

    Case "hashtags":
        Local content = "#" .. item["name"]
        moai.DoMethod("lv_hashtags", "Insert", "Top", base:StripHTML(content))

    Case "news":
        Local content = item["author_name"] .. ": " .. item["title"]
        moai.DoMethod("lv_news", "Insert", "Top", base:StripHTML(content))

    Case "foryou":
        Local content = item["account"]["display_name"] .. ": " .. item["account"]["acct"]
        moai.DoMethod("lv_foryou", "Insert", "Top", base:StripHTML(content))

    Case "local":
        If last_local_timeline_id <> item["id"]
            last_local_timeline_id = item["id"]

            Local content = item["account"]["display_name"] .. ": " .. item["content"]
            moai.DoMethod("lv_local", "Insert", "Top", base:StripHTML(content), item["reblogged"], item["favourited"], item["bookmarked"], item["id"], "status")
        EndIf

    Case "federated":
        If last_federated_timeline_id <> item["id"]
            last_federated_timeline_id = item["id"]

            Local content = item["account"]["display_name"] .. ": " .. item["content"]
            moai.DoMethod("lv_federated", "Insert", "Top", base:StripHTML(content), item["reblogged"], item["favourited"], item["bookmarked"], item["id"], "status")
        EndIf

    Case "dm":
        If last_dm_id <> item["id"]
            last_dm_id = item["id"]

            If item["last_status"] <> Nil
                Local content = item["last_status"]["account"]["display_name"] .. ": " .. item["last_status"]["content"]
                moai.DoMethod("lv_dm", "Insert", "Top", base:StripHTML(content), item["id"], "conversation")
            EndIf
        EndIf

    Case "favourites":
        If last_favourite_id <> item["id"]
            last_favourite_id = item["id"]

            Local content = item["account"]["display_name"] .. ": " .. item["content"]
            moai.DoMethod("lv_favourites", "Insert", "Top", base:StripHTML(content), item["reblogged"], item["favourited"], item["bookmarked"], item["id"], "status")
        EndIf

    Case "bookmarks":
        If last_bookmark_id <> item["id"]
            last_bookmark_id = item["id"]

            Local content = item["account"]["display_name"] .. ": " .. item["content"]
            moai.DoMethod("lv_bookmarks", "Insert", "Top", base:StripHTML(content), item["reblogged"], item["favourited"], item["bookmarked"], item["id"], "status")
        EndIf

    Case "lists":
        If last_list_id <> item["id"]
            last_list_id = item["id"]

            moai.DoMethod("lv_lists", "Insert", "Top", item["title"], item["id"], "list")
        EndIf

    Case "followrequests":
        If last_request_id <> item["id"]
            last_request_id = item["id"]

            Local content = item["display_name"] .. ": " .. item["acct"]
            moai.DoMethod("lv_followrequests", "Insert", "Top", base:StripHTML(content), item["id"], "follow_request")
        EndIf

    EndSwitch
EndFunction

Function p_SetUsernameLabel()
    If Not account = Nil And HasItem(account, "acct") And Not EmptyStr(account.acct)
        moai.Set("lbl_profile", "Text", "@" .. account.acct)
    Else
        moai.Set("lbl_profile", "Text", "Anonymous")
    EndIf
EndFunction

Function p_SetServerLabel()
    If Not EmptyStr(settings.server)
        moai.Set("lbl_instance", "Text", settings.server)
    Else
        moai.Set("lbl_instance", "Text", "NONE")
    EndIf
EndFunction

Function p_ClearReplyTo()
    moai.Set("txt_reply_to", "Text", "")
    moai.Set("txt_reply_to", "Hide", True)
    moai.Set("grp_reply_to", "Hide", True)
    selected_id = Nil
    selected_content = Nil
EndFunction

Function p_GetActiveListview()
    Switch moai.Get("pv_main", "Active")

    Case 0: ;Publish
    Case 1: ;Notifications
        If moai.Get("pv_notifications", "Active") = 0 ; All
            Return("lv_notifications")
        Else ; Mentions
            Return("lv_mentions")
        EndIf
    Case 2: ;Explore
        Switch moai.Get("pv_explore", "Active") 
        Case 0: ; Posts
            Return("lv_posts")
        Case 1: ; Hashtags
            Return("lv_hashtags")
        Case 2: ; News
            Return("lv_news")
        Case 3: ; For you
            Return("lv_foryou")
        EndSwitch        
    Case 3: ;Timeline
        If moai.Get("pv_timeline", "Active") = 0 ; Local
            Return("lv_local")
        Else ; Federated
            Return("lv_federated")
        EndIf
    Case 4: ;DMs
        Return("lv_dm")
    Case 5: ;Favourites
        Return("lv_favourites")
    Case 6: ;Bookmarks
        Return("lv_bookmarks")
    Case 7: ;Lists
        Return("lv_lists")
    Case 8: ;Follow Requests
        Return("lv_followrequests")
    EndSwitch
EndFunction

/*
* Update the main Action buttons state (Toggle Pressed/Not pressed)
*/
Function p_UpdateActionButtonState()
    ; Disable the event handler temporarily, otherwise it will trigger an event for the button
    InstallEventHandler({RapaGUI = 0})

    Local btn_boost
    Local btn_favourite
    Local btn_bookmark
    Local active_listview = p_GetActiveListview()
    active_listview = UnrightStr(active_listview, 3)

    ; Special cases first
    If active_listview = "mentions" Then active_listview = "notifications" ; Two tabs in the same pageview
    If active_listview = "posts" Then active_listview = "explore"
    If active_listview = "local" Or active_listview = "federated" Then active_listview = "timeline" ; Two tabs in the same pageview
    
    btn_boost = "btn_" .. active_listview .. "_boost"
    btn_favourite = "btn_" .. active_listview .. "_favourite"
    btn_bookmark = "btn_" .. active_listview .. "_bookmark"

    If #DEBUG Then DebugPrint("selected_reblogged: " .. selected_reblogged)
    If selected_reblogged = "1" Or selected_reblogged = "On"
        moai.Set(btn_boost, "Selected", True) 
    Else 
        moai.Set(btn_boost, "Selected", False)
    EndIf

    If #DEBUG Then DebugPrint("selected_favourite: " .. selected_favourite)
    If selected_favourite = "1" Or selected_favourite = "On"
        moai.Set(btn_favourite, "Selected", True) 
    Else 
        moai.Set(btn_favourite, "Selected", False)
    EndIf

    If #DEBUG Then DebugPrint("selected_bookmark: " .. selected_bookmark)
    If selected_bookmark = "1" Or selected_bookmark = "On"
        moai.Set(btn_bookmark, "Selected", True) 
    Else 
        moai.Set(btn_bookmark, "Selected", False)
    EndIf
    ; Re-enable the event handler
    InstallEventHandler({RapaGUI = p_EventFunc})
EndFunction

/*
* Update the HTMLview Action buttons state (Toggle Pressed/Not pressed)
*/
Function p_UpdateActionButton2State()
    ; Disable the event handler temporarily, otherwise it will trigger an event for the button
    InstallEventHandler({RapaGUI = 0})
    If #DEBUG Then DebugPrint("selected_reblogged: " .. selected_reblogged)
    If selected_reblogged = "1" Or selected_reblogged = "On"
        moai.Set("btn_htmlview_boost", "Selected", True) 
    Else 
        moai.Set("btn_htmlview_boost", "Selected", False)
    EndIf

    If #DEBUG Then DebugPrint("selected_favourite: " .. selected_favourite)
    If selected_favourite = "1" Or selected_favourite = "On" 
        moai.Set("btn_htmlview_favourite", "Selected", True) 
    Else 
        moai.Set("btn_htmlview_favourite", "Selected", False)
    EndIf

    If #DEBUG Then DebugPrint("selected_bookmark: " .. selected_bookmark)
    If selected_bookmark = "1" Or selected_bookmark = "On"
        moai.Set("btn_htmlview_bookmark", "Selected", True) 
    Else 
        moai.Set("btn_htmlview_bookmark", "Selected", False)
    EndIf
    ; Re-enable the event handler
    InstallEventHandler({RapaGUI = p_EventFunc})
EndFunction

/*
* Update the selected Visibility option in the modal dialog
*/
Function p_UpdateVisibility(index)
    ; Disable the event handler temporarily, otherwise it will trigger an event for the button
    InstallEventHandler({RapaGUI = 0})

    moai.Set("rdo_visibility", "Active", index)

    ; Re-enable the event handler
    InstallEventHandler({RapaGUI = p_EventFunc})
EndFunction

/*
** Event handlers for the GUI
*/
Function p_DoubleClickEvent(id)
    Switch id FallThrough

    Case "lv_notifications":
    Case "lv_mentions":
    Case "lv_posts":
    Case "lv_local":
    Case "lv_federated":
    Case "lv_dm":
    Case "lv_favourites":
    Case "lv_bookmarks": 
        If #DEBUG Then DebugPrint("Double click on Notifications listview triggered")
        If ToNumber(selected_id) > 0
            Local status = p_GetSingleContent(selected_id, selected_type)
            p_OpenHtmlView(status)
        EndIf
        Break

    EndSwitch 
EndFunction

Function p_GUIEvent(id)
    Switch id FallThrough

    Case "rdo_visibility":
        ; public, unlisted, private or direct
        active_visibility_index = moai.Get("rdo_visibility", "Active")
        Switch active_visibility_index
        Case 0:
            active_visibility = "Public"
        Case 1:
            active_visibility = "Unlisted"
        Case 2:
            active_visibility = "Private"
        Case 3:
            active_visibility = "Direct"
        EndSwitch
        moai.DoMethod("dlg_visibility", "EndModal", 1)
        moai.Set("btn_changeprivacy", "Text", active_visibility)
        Break

    Case "btn_clear_reply_to":
        p_ClearReplyTo()
        Break
    Case "txtedit":
        Local length = StrLen(moai.Get("txtedit", "Text"))
        moai.Set("lbl_chars", "Text", 500 - length)
        Break

    Case "btn_notifications_reply":
    Case "btn_htmlview_reply":
    Case "btn_explore_reply":
    Case "btn_timeline_reply":
    Case "btn_favourites_reply":
    Case "btn_dm_reply":
    Case "btn_bookmarks_reply":
        If #DEBUG Then DebugPrint("Reply button pressed, selected Id was ".. selected_id)
        If ToNumber(selected_id) > 0
            moai.Set("txt_reply_to", "Hide", False)
            moai.Set("grp_reply_to", "Hide", False)
            moai.Set("txt_reply_to", "Text", selected_content)
            moai.Set("pv_main", "Active", "First")
        EndIf
        Break

    Case "btn_notifications_boost":
    Case "btn_htmlview_boost":
    Case "btn_explore_boost":
    Case "btn_timeline_boost":
    Case "btn_favourites_boost":
    Case "btn_bookmarks_boost":
        If #DEBUG Then DebugPrint("Boost button pressed, selected Id was ".. selected_id)
        If ToNumber(selected_id) > 0
            Local lv = p_GetActiveListview()
            Local row = moai.Get(lv, "Active")
            Local action
            If selected_reblogged = "On"
                action = "unreblog"
                moai.DoMethod(lv, "SetState", row, 0, False)
            Else
                action = "reblog"
                moai.DoMethod(lv, "SetState", row, 0, True)
            EndIf
            p_StatusAction(selected_id, action)
        EndIf
        Break

    Case "btn_notifications_favourite":
    Case "btn_htmlview_favourite":
    Case "btn_explore_favourite":
    Case "btn_timeline_favourite":
    Case "btn_favourites_favourite":
    Case "btn_bookmarks_favourite":
        If #DEBUG Then DebugPrint("Favourite button pressed, selected Id was ".. selected_id)
        If ToNumber(selected_id) > 0
            Local lv = p_GetActiveListview()
            Local row = moai.Get(lv, "Active")
            Local action
            If selected_favourite = "On"
                action = "unfavourite"
                moai.DoMethod(lv, "SetState", row, 1, False)
            Else
                action = "favourite"
                moai.DoMethod(lv, "SetState", row, 1, True)
            EndIf
            p_StatusAction(selected_id, action)
        EndIf
        Break

    Case "btn_notifications_bookmark":
    Case "btn_htmlview_bookmark":
    Case "btn_explore_bookmark":
    Case "btn_timeline_bookmark":
    Case "btn_favourites_bookmark":
    Case "btn_bookmarks_bookmark":
        If #DEBUG Then DebugPrint("Bookmark button pressed, selected Id was ".. selected_id)
        If ToNumber(selected_id) > 0
            Local lv = p_GetActiveListview()
            Local row = moai.Get(lv, "Active")
            Local action
            If selected_bookmark = "On"
                action = "unbookmark"
                moai.DoMethod(lv, "SetState", row, 2, False)
            Else
                action = "bookmark"
                moai.DoMethod(lv, "SetState", row, 2, True)
            EndIf
             p_StatusAction(selected_id, action)
        EndIf
        Break

    Case "lv_notifications":
    Case "lv_mentions":
    Case "lv_local":
    Case "lv_federated":
    Case "lv_favourites":
    Case "lv_bookmarks":
        selected_content, selected_reblogged, selected_favourite, selected_bookmark, selected_id, selected_type = moai.DoMethod(id, "GetEntry", "Active")
        p_UpdateActionButtonState()
        If #DEBUG Then DebugPrint("Listview selected item changed, id: " .. selected_id)
        Break

    Case "lv_dm":
        selected_content, selected_id, selected_type = moai.DoMethod(id, "GetEntry", "Active")
        selected_reblogged = Nil
        selected_favourite = Nil
        selected_bookmark = Nil
        If #DEBUG Then DebugPrint("Listview selected item changed, id: " .. selected_id)
        Break
    
    Case "btn_getnotifications":
        DisableLineHook() ; Temporarily disable this, to increase performance
        p_GetContent("notifications")
        p_GetContent("mentions")
        EnableLineHook() ; Enable it again after we are done
        Break

    Case "btn_gettrending":
        ; Posts, Hashtags, News or For You
        Local type

        Switch moai.Get("pv_explore", "Active")
        Case 0:
            type = "posts"
        Case 1:
            type = "hashtags"
        Case 2:
            type = "news"
        Case 3:
            type = "foryou"
        EndSwitch

        DisableLineHook()
        p_ClearListView(type)
        p_GetContent(type)
        EnableLineHook()
        Break

    Case "btn_gettimeline":
        DisableLineHook()
        p_GetContent("local")
        p_GetContent("federated")
        EnableLineHook()
        Break

    Case "btn_getdm":
    Case "btn_getfavourites":
    Case "btn_getbookmarks":
    Case "btn_getlists":
    Case "btn_getfollowrequests":
        DisableLineHook()
        p_GetContent(UnrightStr(id, 7))
        EnableLineHook()
        Break

    Case "btn_WelcomeDialogOK":
        moai.DoMethod("dlg_welcome", "EndModal", 1)
        p_OpenSettingsDialog()
        Break
    Case "btn_SaveSettings":
        p_ParseSettings()
        p_SetServerLabel()
        moai.DoMethod("dlg_settings", "EndModal", 1)
        Break
    Case "btn_CancelSettings":
        moai.DoMethod("dlg_settings", "EndModal", 0)
        Break
    Case "btn_openlogin":
        p_ParseSettings()
        If token = Nil
            p_GetServerAuthorization()
        EndIf
        p_OpenLoginDialog()
        Break
    Case "btn_LoginSaveCode":
        p_SaveLoginAuthCode()
        moai.DoMethod("dlg_login", "EndModal", 1)
        account = p_GetVerifyAccountCredentials()
        p_SetUsernameLabel()
        p_GetAccountAvatar(True)
        Break
    Case "btn_Publish":
        Local status = moai.Get("txtedit", "Text")
        If sensitive = True
            spoiler_text = moai.Get("txt_cw", "Text")
        EndIf
        If poll = True
            p_GetPollOptions()
        EndIf
        p_PublishStatus(status)
        Break
    Case "btn_addmedia":
        ; TODO parse result of AddMedia, we need the id(s) for publishing
        p_AddMedia()
        Break
    Case "btn_addpoll":
        poll = moai.Get("btn_addpoll", "Selected")
        p_SetPollStatus()
        Break
    Case "btn_add_poll_choice":
        p_AddPollChoice()
        Break
    Case "btn_poll_remove3":
    Case "btn_poll_remove4"
        p_RemovePollChoice()
        Break
    Case "cmb_poll_duration":
        p_GetPollOptions()
        Break
    Case "btn_cw":
        sensitive = moai.Get("btn_cw", "Selected")
        p_SetCWStatus()
        Break
    Case "btn_changeprivacy":
        p_OpenVisibilityDialog(active_visibility_index)
        Break
    Case "btn_dlg_OK":
        moai.DoMethod("dlg_generic", "EndModal", 0)
        Break
    Case "btn_LoginCancel":
        moai.DoMethod("dlg_login", "EndModal", 0)
        Break
    Case "mn_about":
        Local license = "\nThis program is free software: you can redistribute it and/or modify\n"
        license = license .. "it under the terms of the GNU General Public License as published by\n"
        license = license .. "the Free Software Foundation, either version 3 of the License, or\n"
        license = license .. "(at your option) any later version.\n\n"
        license = license .. "This program is distributed in the hope that it will be useful,\n"
        license = license .. "but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
        license = license .. "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
        license = license .. "GNU General Public License for more details.\n\n"
        license = license .. "You should have received a copy of the GNU General Public License\n"
        license = license .. "along with this program.  If not, see <https://www.gnu.org/licenses/>."
		moai.Request("Amidon", #ABOUTMSG .. license, "OK")
        Break
    Case "mn_aboutmui":
        moai.DoMethod("app", "AboutMUI")
        Break
    Case "mn_aboutrapagui":
        moai.DoMethod("app", "AboutRapaGUI")
        Break
    Case "mn_settings":
        p_OpenSettingsDialog()
        Break
    Case "mn_settingsmui":
        moai.DoMethod("app", "OpenConfigWindow")
        Break
    Case "mn_quit":
        p_QuitApp()
        Break
	EndSwitch
EndFunction