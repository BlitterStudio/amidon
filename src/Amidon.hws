/****************************************************************
**                                                             **
** Name:        Amidon                                         **
** Description: a Mastodon client for AmigaOS                  **
** Author:      Dimitris Panokostas                            **
** Version:     1.3                                            **
** Date:        2023-05-13                                     **
** Interpreter: Hollywood 9.1+                                 **
**                                                             **
****************************************************************/

/*
	Amidon - a Mastodon client for AmigaOS
    Copyright (C) 2023 Dimitris Panokostas

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

; Constants
Const #ABOUTMSG = "Amidon v1.3 - a Mastodon client for AmigaOS\nCopyright (C) 2023 Dimitris Panokostas\n"
Const #DEBUG = False ; Set this to True to get DEBUG output

@VERSION 9,1
@REQUIRE "hurl", {Link = True}
@REQUIRE "RapaGUI", {Link = True}

/*
** Information about this app
*/
@APPTITLE "Amidon"
@APPVERSION "$VER: Amidon 1.3 (2023-11-20)"
@APPCOPYRIGHT "(C) Copyright 2023 by Dimitris Panokostas"
@APPAUTHOR "Dimitris Panokostas"
@APPDESCRIPTION "A Mastodon client for AmigaOS"

/*
** Button and list view images
*/
@BRUSH 0, "assets/Amidon_logo.png"
@BRUSH 1, "assets/anonymous.png"
@BRUSH 2, "assets/mastodon_logo-25%.png", {LoadAlpha = True}
@BRUSH 6, "assets/Comments.png", {LoadAlpha = True}
@BRUSH 7, "assets/Refresh.png", {LoadAlpha = True}
@BRUSH 8, "assets/Favorite.png", {LoadAlpha = True}
@BRUSH 9, "assets/Tag-Purple.png", {LoadAlpha = True}
@BRUSH 10, "assets/Rotate.png", {LoadAlpha = True}

/*
** The GUI xml definition
*/
; We reserve 1 for our prefs file, if it exists (see below)
;@FILE 1, "settings.json"
@FILE 2, "gui/Amidon_single.xml"
@FILE 3, "gui/Welcome.xml"
@FILE 4, "gui/Settings.xml"
@FILE 5, "gui/Login.xml"
@FILE 6, "gui/Dialog.xml"
@FILE 7, "gui/HtmlView.xml"
@FILE 8, "gui/SelectVisibility.xml"

@INCLUDE "Amidon.Domain.hws"
@INCLUDE "Amidon.Settings.hws"
@INCLUDE "Amidon.UI.hws"
@INCLUDE "Mastodon.API.hws"
@INCLUDE "StripHTML.hws"

;OpenDisplay(1)

; Global variables
Global settings = Nil
Global creds = Nil
Global json = Nil
Global token = Nil
Global account = Nil
Global anonymous = Nil

Global settings_file = 1
Global welcome_dialog_file = 3
Global welcome_dialog = Nil
Global settings_dialog_file = 4
Global settings_dialog = Nil
Global login_dialog_file = 5
Global login_dialog = Nil
Global generic_dialog_file = 6
Global generic_dialog = Nil
Global htmlview_dialog_file = 7
Global htmlview_dialog = Nil
Global visibility_dialog_file = 8
Global visilibity_dialog = Nil

Global user_avatar_brush = 1

; Content related variables
Global last_notification_id = Nil
Global last_mention_id = Nil
Global last_local_timeline_id = Nil
Global last_federated_timeline_id = Nil
Global last_dm_id = Nil
Global last_favourite_id = Nil
Global last_bookmark_id = Nil
Global last_list_id = Nil
Global last_request_id = Nil
Global last_profile_post_id = Nil
Global last_profile_post_replies_id = Nil

Global selected_id = Nil
Global selected_content = Nil
Global selected_type = Nil
Global selected_reblogged = Nil
Global selected_favourite = Nil
Global selected_bookmark = Nil

; New posts statuses
Global media_ids = {}
Global poll = False
Global poll_options = {}
Global poll_options_num = 0
Global poll_expires = 0
Global poll_multi = False

Global sensitive = False
Global spoiler_text = Nil

Global language = "en"
Global active_visibility_index = 0
Global active_visibility = "public"

; Local variables
Local gui_file = 2
Local gui ; The GUI definition

; Load settings if found
; This needs to be checked before we initialize the app below
If Exists("settings.json")
	OpenFile(settings_file, "settings.json")
	settings = ReadTable(settings_file, {Adapter = "default"})
	CloseFile(settings_file)
EndIf

; dynamically create GUI from an external *.xml file definition
While Not Eof(gui_file) Do gui = gui .. ReadLine(gui_file)
moai.CreateApp(gui)

; listen to these events
InstallEventHandler({RapaGUI = p_EventFunc})

; We use a cache directory to store tokens, images etc.
; If it doesn't exist (e.g. first run), we will create it now
If Not Exists("cache")
	If #DEBUG Then DebugPrint("Cache dir not found, creating it now")
	MakeDirectory("cache")
EndIf

; Settings handling
; If no settings exist yet, the we can show the Welcome dialog
If Not Exists("settings.json")
	p_SetDefaultSettings()
	; We generate the file with the default settings
	p_SaveSettings()
	p_ShowWelcomeDialog()
EndIf

; If we have a server setting configured, try to load any existing access token
If Not settings.server = Nil And Not EmptyStr(settings.server)
	p_GetServerAuthorization()	
	If #DEBUG Then DebugPrint("Token loaded from file: ", token.access_token)
	account = p_GetVerifyAccountCredentials()
EndIf

; Check if we are browsing the server in anonymous mode (no login performed)
If Not account = Nil And HasItem(account, "acct") And Not EmptyStr(account.acct)
	anonymous = False
Else
	anonymous = True
EndIf

moai.Set("main", "Open", True)

p_SetServerLabel()
p_SetUsernameLabel()
p_GetAccountAvatar(False)

;CloseDisplay(1)

; main loop
Repeat
	WaitEvent
Forever
